//#define HOW_IT_SHOULD_BE "on"


/obj/screen/plane_master
	screen_loc = "CENTER"
	icon_state = "blank"
	appearance_flags = PLANE_MASTER|NO_CLIENT_COLOR
	blend_mode = BLEND_OVERLAY
	var/show_alpha = 255
	var/hide_alpha = 0

	//--rendering relay vars--
	///integer: what plane we will relay this planes render to
	var/render_relay_plane = RENDER_PLANE_GAME // = 990
	///bool: Whether this plane should get a render target automatically generated
	var/generate_render_target = TRUE
	///integer: blend mode to apply to the render relay in case you dont want to use the plane_masters blend_mode
	var/blend_mode_override
	///reference to render relay screen object to avoid backdropping multiple times
	var/atom/movable/render_plane_relay/relay

/obj/screen/plane_master/proc/Show(override)
	alpha = override || show_alpha

/obj/screen/plane_master/proc/Hide(override)
	alpha = override || hide_alpha

//this proc is called when a mob gets it's HUD objects initialized
/obj/screen/plane_master/proc/backdrop(mob/mymob)
	SHOULD_CALL_PARENT(TRUE)
	if(!isnull(render_relay_plane))
#ifdef HOW_IT_SHOULD_BE
		if(blend_mode_override)
			blend_mode = blend_mode_override
#else
		relay_render_to_plane(mymob, render_relay_plane)
#endif

/**
 * Plane master proc called in backdrop() that creates a relay object, sets it as needed and then adds it to the clients screen
 * Why do this?
 * basically we want to render all the planes on the /obj/screen/plane_master/rendering_plate/game_world
 * So what we do is create a holder object that uses render target/source to render it to the plane
 * Sets:
 * * layer from plane to avoid z-fighting
 * * plane to relay the render to
 * * render_source so that the plane will render on this object
 * * mouse opacity to ensure proper mouse hit tracking
 * * name for debugging purposes
 * Other vars such as alpha will automatically be applied with the render source
 * Arguments:
 * * mymob: mob whose plane is being backdropped
 * * relay_plane: plane we are relaying this plane master to
 */
/obj/screen/plane_master/proc/relay_render_to_plane(mob/mymob, relay_plane)
	if(relay in mymob.client.screen)
		return
	if(!render_target && generate_render_target)
		render_target = "*[name]: AUTOGENERATED RENDER TGT"
	relay = new()
	relay.render_source = render_target
	relay.plane = relay_plane
	relay.layer = (plane + abs(LOWEST_EVER_PLANE))*0.5 //layer must be positive but can be a decimal
	if(blend_mode_override)
		relay.blend_mode = blend_mode_override
	else
		relay.blend_mode = blend_mode
	relay.mouse_opacity = mouse_opacity
	relay.name = render_target
	mymob.client.screen += relay
	if(plane != BLACKNESS_PLANE) //intenral snowflake do not touch
		blend_mode = BLEND_DEFAULT

///Contains just the floor
/obj/screen/plane_master/floor
	name = "floor plane master"
	plane = FLOOR_PLANE //plane -5
	appearance_flags = PLANE_MASTER
	blend_mode = BLEND_OVERLAY

///Contains most things in the game world
/obj/screen/plane_master/game_world
	name = "game world plane master"
	plane = GAME_PLANE // plane -4
	appearance_flags = PLANE_MASTER //should use client color
	blend_mode = BLEND_OVERLAY

/**
 * Plane master handling byond internal blackness
 * vars are set as to replicate behavior when rendering to other planes
 * do not touch this unless you know what you are doing
 */
/obj/screen/plane_master/blackness
	name = "darkness plane master"
	plane = BLACKNESS_PLANE // plane 0
	mouse_opacity = MOUSE_OPACITY_TRANSPARENT//0
	blend_mode = BLEND_MULTIPLY
	appearance_flags = PLANE_MASTER | NO_CLIENT_COLOR | PIXEL_SCALE



///Contains all lighting objects
/obj/screen/plane_master/lighting
	name = "lighting plane master"
	plane = LIGHTING_PLANE //plane 100
	blend_mode_override = BLEND_MULTIPLY
	mouse_opacity = MOUSE_OPACITY_TRANSPARENT // 0

/obj/screen/plane_master/lighting/backdrop(mob/mymob)
	. = ..()
	mymob.overlay_fullscreen("lighting_backdrop", /obj/screen/fullscreen/lighting_backdrop/backplane)
	mymob.overlay_fullscreen("lighting_backdrop_lit_secondary", /obj/screen/fullscreen/lighting_backdrop/lit_secondary)

///adds back drops and large screen objects
/mob/proc/overlay_fullscreen(category, type, severity)
	var/obj/screen/fullscreen/screen = fullscreens[category]
	if (!screen || screen.type != type)
		// needs to be recreated
		clear_fullscreen(category, FALSE)
		fullscreens[category] = screen = new type()
	else if ((!severity || severity == screen.severity) && (!client || screen.screen_loc != "CENTER-7,CENTER-7" || screen.fs_view == client.view))
		// doesn't need to be updated
		return screen

	screen.icon_state = "[initial(screen.icon_state)][severity]"
	screen.severity = severity
	if (client && SHOULD_SHOW_TO(src, screen))
		screen.update_for_view(client.view)
		client.screen += screen

	return screen

/obj/screen/plane_master/parallax
	name = "red background stuff plane master"
	plane = PLANE_SPACE_PARALLAX //plane -90
	blend_mode = BLEND_MULTIPLY
	mouse_opacity = MOUSE_OPACITY_TRANSPARENT // 0


//backdropS HERE

/obj/screen/fullscreen/lighting_backdrop
	icon = 'icons/mob/screen/generic.dmi'
	icon_state = "flash"
	transform = matrix(200, 0, 0, 0, 200, 0)
	plane = LIGHTING_PLANE //plane 100
	blend_mode = BLEND_OVERLAY
	show_when_dead = TRUE

/obj/screen/fullscreen/lighting_backdrop/update_for_view(client_view)
	return

//Provides darkness to the back of the lighting plane
/obj/screen/fullscreen/lighting_backdrop/lit_secondary
	invisibility = 20
	layer = BACKGROUND_LAYER + LIGHTING_PRIMARY_DIMMER_LAYER //layer 20015.1
	color = "#000"
	alpha = 60

/obj/screen/fullscreen/lighting_backdrop/backplane
	invisibility = 20
	layer = LIGHTING_BACKPLANE_LAYER //layer 14.5
	color = "#000"
	blend_mode = BLEND_ADD



/**
 * Render relay object assigned to a plane master to be able to relay it's render onto other planes that are not it's own
 */
/atom/movable/render_plane_relay
	screen_loc = "CENTER"
	layer = -1
	plane = 0
	appearance_flags = PASS_MOUSE | NO_CLIENT_COLOR | KEEP_TOGETHER


///plane that everything else renders to
/obj/screen/plane_master/rendering_plate/game_world
	name = "game rendering plate"
	plane = RENDER_PLANE_GAME //plane 990
	generate_render_target = null
	render_relay_plane = null

/obj/example_lighting_effect
	icon = 'icons/effects/light_overlays/light_352.dmi'
	icon_state = "light"
	plane = LIGHTING_PLANE //plane 100
	blend_mode = BLEND_ADD
	appearance_flags = NONE
